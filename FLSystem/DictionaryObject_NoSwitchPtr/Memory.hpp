/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//           辞書オブジェクトクラス[メモリ管理関連定義]
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "../../SwfPlayerLib.h"

namespace SwfPlayerLib{
namespace FLSystem{

//*************************************************************************************************************************************************************
//★DicObject変数の領域確保関数
//-------------------------------------------------------------------------------------------------------------------------------------------------------------
//【説明】
//DicObject変数の作成を行ないます。
//辞書オブジェクトタイプが追加になったらここにメモリ確保処理を追加してください。
//-------------------------------------------------------------------------------------------------------------------------------------------------------------
//【書式】
//CreateDicObject( <tOBJECT_TYPE $DicType> );
//<tOBJECT_TYPE $DicType>：作成する辞書オブジェクトタイプを指定します。
//　　値：<「tOBJECT_TYPE」の値と同値。列挙値の定義を参照してください。>
//*************************************************************************************************************************************************************
void DictionaryObject::CreateDicObject( tOBJECT_TYPE $DicType ){
	if ( isDicObject() || $DicType == tOBJECT_TYPE::UNDEFINED ) { return; }//既に変数が作成済みか作成タイプ指定がおかしい場合は関数終了。
	
	if ( $DicType == tOBJECT_TYPE::BITMAP	 ) { DicObject = new BitMap		(); }else//Flash-BitMap型クラスを作成。
	if ( $DicType == tOBJECT_TYPE::MOVIECLIP ) { DicObject = new MovieClip	(); }else//Flash-MovieClip型クラスを作成。
	if ( $DicType == tOBJECT_TYPE::SHAPE	 ) { DicObject = new Shape		(); }	 //Flash-Shape型クラスを作成。

	DicType = $DicType;//辞書オブジェクトタイプを更新。

}
//*************************************************************************************************************************************************************


//*************************************************************************************************************************************************************
//★DicObject変数の領域開放
//-------------------------------------------------------------------------------------------------------------------------------------------------------------
//【説明】
//DicObject変数の削除を行ないます。
//辞書オブジェクトタイプが追加になったらここに開放処理を追加してください。
//-------------------------------------------------------------------------------------------------------------------------------------------------------------
//【書式】
//DeleteDicObject();
//*************************************************************************************************************************************************************
void DictionaryObject::DeleteDicObject(){
	if ( !isDicObject() || DicType == tOBJECT_TYPE::UNDEFINED ) { return; }

	BitMap*		fDestBitMap		= NULL;//破棄用のBitMapポインタ
	MovieClip*	fDestMovieClip	= NULL;//破棄用のMovieClipポインタ
	Shape*		fDestShape		= NULL;//破棄用のShapeポインタ
	
	if ( DicType == tOBJECT_TYPE::BITMAP	) { fDestBitMap		= (BitMap*	 )DicObject; delete fDestBitMap;	DicObject = fDestBitMap		= NULL; }else//Flash-BitMap型クラスを削除。
	if ( DicType == tOBJECT_TYPE::MOVIECLIP	) { fDestMovieClip	= (MovieClip*)DicObject; delete fDestMovieClip;	DicObject = fDestMovieClip	= NULL; }else//Flash-MovieClip型クラスを削除。
	if ( DicType == tOBJECT_TYPE::SHAPE		) { fDestShape		= (Shape*	 )DicObject; delete fDestShape;		DicObject = fDestShape		= NULL; }	 //Flash-Shape型クラスを削除。

	DicType = tOBJECT_TYPE::UNDEFINED;//辞書オブジェクトタイプを初期化。

}
//*************************************************************************************************************************************************************


//*************************************************************************************************************************************************************
//★ポインタ定義変数の管理関連関数
//-------------------------------------------------------------------------------------------------------------------------------------------------------------
//【説明】
//主にポインタ定義で使用している変数の作成や削除、存在確認等を行なう、簡単な関数群を定義(実装)しています。
//*************************************************************************************************************************************************************
bool DictionaryObject::isDicObject() const{ return (DicObject != NULL)? true : false; }//DicObject変数の領域確保状態取得関数
//---------------------------------------------------------
void DictionaryObject::DeleteAllVariables(){ DeleteDicObject(); }//全変数の領域開放関数
//*************************************************************************************************************************************************************

}}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
