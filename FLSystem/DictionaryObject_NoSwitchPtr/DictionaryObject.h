/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//           辞書オブジェクトクラス[基本定義]
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef INC_FL_DICTIONARYOBJECT_H//まだ読み込まれていなければ以下の処理をする
#define INC_FL_DICTIONARYOBJECT_H//「辞書オブジェクトクラス」読み込みフラグ

#include "../../Include.h"											//全ファイルでInclude可能なソースまとめファイル
#include "../Constant.hpp"											//Flashシステム関連の定数定義ファイル

namespace SwfPlayerLib{
namespace FLSystem{

using namespace std;		//「string」の名前空間「std」を指定
using namespace AppStdLib;	//アプリ開発用標準ライブラリの名前空間「AppStdLib」を指定
using namespace Const;		//FLSystem定数の名前空間「Const」を指定

//*************************************************************************************************************************************************************
//★辞書オブジェクトクラス
//-------------------------------------------------------------------------------------------------------------------------------------------------------------
//【説明】
//このクラスでは辞書(Flashのライブラリに相当)に格納できる全オブジェクトの管理を行ないます。
//基本的にこのクラスはDictionaryクラスで使用され、ディスプレイリストに配置される場合は必ずコピーされて配置されます。
//ただし、BitMapやSoundなどのメモリを食うコンテンツは基本的に参照で配置されます。(予定)
//*************************************************************************************************************************************************************
class DictionaryObject{
	
	public:
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		//■型定義[public]
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		typedef tDIC_OBJECT_TYPE::ENUM tOBJECT_TYPE;//辞書オブジェクトタイプ定数値の省略定義
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		//■関数定義[public]
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		//=================================================================================================================================
		//☆コンストラクタ群[DictionaryObject.hpp]⇒◎実装済み
		//=================================================================================================================================
		DictionaryObject(									);//コンストラクタ[初期値が未定義]
		DictionaryObject( const BitMap			 &$InitVar	);//コンストラクタ[初期値がBitMap]
		DictionaryObject( const MovieClip		 &$InitVar	);//コンストラクタ[初期値がMovieClip]
		DictionaryObject( const Shape			 &$InitVar	);//コンストラクタ[初期値がShape]
		DictionaryObject( const DictionaryObject &$InitVar	);//コンストラクタ[初期値がDictionaryObject]
		//=================================================================================================================================
		//=================================================================================================================================
		//☆オペレータ - 代入演算子(=)群[Operator.hpp]⇒◎実装済み
		//=================================================================================================================================
		DictionaryObject &operator=( const BitMap			&$CalcNum );//代入演算子(=)[BitMap]
		DictionaryObject &operator=( const MovieClip		&$CalcNum );//代入演算子(=)[MovieClip]
		DictionaryObject &operator=( const Shape			&$CalcNum );//代入演算子(=)[Shape]
		DictionaryObject &operator=( const DictionaryObject	&$CalcNum );//代入演算子(=)[DictionaryObject]
		//=================================================================================================================================
		//☆オペレータ - 比較演算(==)群[Operator.hpp]⇒◎実装済み
		//=================================================================================================================================
		bool operator==( const BitMap			&$CalcNum ) const;//比較演算(==)[BitMap]
		bool operator==( const MovieClip		&$CalcNum ) const;//比較演算(==)[MovieClip]
		bool operator==( const Shape			&$CalcNum ) const;//比較演算(==)[Shape]
		bool operator==( const DictionaryObject	&$CalcNum ) const;//比較演算(==)[DictionaryObject]
		//=================================================================================================================================
		//☆オペレータ - 比較演算(!=)群[Operator.hpp]⇒◎実装済み
		//=================================================================================================================================
		bool operator!=( const BitMap			&$CalcNum ) const;//比較演算(!=)[BitMap]
		bool operator!=( const MovieClip		&$CalcNum ) const;//比較演算(!=)[MovieClip]
		bool operator!=( const Shape			&$CalcNum ) const;//比較演算(!=)[Shape]
		bool operator!=( const DictionaryObject	&$CalcNum ) const;//比較演算(!=)[DictionaryObject]
		//=================================================================================================================================
		//=================================================================================================================================
		//☆アクセサ関連[Accessor.hpp]⇒◎実装済み
		//=================================================================================================================================
		void SetDicObject( const BitMap				&$DicObject );//本クラスにBitMap情報を設定する関数
		void SetDicObject( const MovieClip			&$DicObject );//本クラスにMovieClip情報を設定する関数
		void SetDicObject( const Shape				&$DicObject );//本クラスにShape情報を設定する関数
		void SetDicObject( const DictionaryObject	&$DicObject );//本クラスの情報全てを設定する関数
		//---------------------------------------------------------------------------------------------------------------------------------
		tOBJECT_TYPE GetDicType() const;//本クラスの辞書オブジェクトタイプの値を返す関数
		//----------------------------------------------------------------------
		const BitMap*	 GetBitMapPtr	() const;//本クラスのDicObjectをBitMapのポインタに変換して返す関数
		const MovieClip* GetMovieClipPtr() const;//本クラスのDicObjectをMovieClipのポインタに変換して返す関数
		const Shape*	 GetShapePtr	() const;//本クラスのDicObjectをShapeのポインタに変換して返す関数
		//----------------------------------------------------------------------
		BitMap*		GetBitMapPtr	();//本クラスのDicObjectをBitMapのポインタに変換して返す関数
		MovieClip*	GetMovieClipPtr	();//本クラスのDicObjectをMovieClipのポインタに変換して返す関数
		Shape*		GetShapePtr		();//本クラスのDicObjectをShapeのポインタに変換して返す関数
		//=================================================================================================================================
		//=================================================================================================================================
		//☆基本機能関連[DictionaryObjectBasic.hpp]⇒◎実装済み
		//=================================================================================================================================
		bool isSame( const BitMap			&$CalcNum ) const;//本クラスのDictionaryObject情報が指定されたBitMap情報と同じであるか確認する関数
		bool isSame( const MovieClip		&$CalcNum ) const;//本クラスのDictionaryObject情報が指定されたMovieClip情報と同じであるか確認する関数
		bool isSame( const Shape			&$CalcNum ) const;//本クラスのDictionaryObject情報が指定されたShape情報と同じであるか確認する関数
		bool isSame( const DictionaryObject	&$CalcNum ) const;//本クラスのDictionaryObject情報が指定されたDictionaryObject情報と同じであるか確認する関数
		//=================================================================================================================================
		//=================================================================================================================================
		//☆メモリ管理関連[Memory.hpp]⇒◎実装済み
		//=================================================================================================================================
		bool isDicObject() const;//DicObject変数の領域確保状態取得関数
		//=================================================================================================================================
		//=================================================================================================================================
		//☆デバッグ機能関連[DictionaryObjectDebug.hpp]⇒◎実装済み
		//=================================================================================================================================
		void DebugExec();//各種機能のデバッグ実行関数
		//=================================================================================================================================
		//=================================================================================================================================
		//☆デストラクタ群[DictionaryObject.hpp]⇒◎実装済み
		//=================================================================================================================================
		~DictionaryObject();//デストラクタ
		//=================================================================================================================================
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	private:
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		//■変数定義[private]
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		tOBJECT_TYPE DicType	= tOBJECT_TYPE::UNDEFINED;	//辞書オブジェクトタイプ
		void*		 DicObject	= NULL;						//辞書オブジェクト
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		//■関数定義[private]
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		//=================================================================================================================================
		//☆メモリ管理関連[Memory.hpp]⇒◎実装済み
		//=================================================================================================================================
		void CreateDicObject( tOBJECT_TYPE $DicType );//DicObject変数の領域確保関数
		//---------------------------------------------------------
		void DeleteDicObject();//DicObject変数の領域開放
		//---------------------------------------------------------------------------------------------------------------------------------
		void DeleteAllVariables();//全変数の領域開放関数
		//=================================================================================================================================
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

};
//*************************************************************************************************************************************************************

}}
#endif//INC_FL_DICTIONARYOBJECT_H
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
