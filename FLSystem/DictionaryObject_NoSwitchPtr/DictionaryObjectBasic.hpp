/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//           辞書オブジェクトクラス[基本機能関連定義]
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "../../SwfPlayerLib.h"

namespace SwfPlayerLib{
namespace FLSystem{

//*************************************************************************************************************************************************************
//★本クラスのDictionaryObject情報が指定されたDictionaryObject情報と同じであるか確認する関数
//-------------------------------------------------------------------------------------------------------------------------------------------------------------
//【説明】
//本クラスのDictionaryObject情報が指定されたDictionaryObject情報と同じであるか確認して結果を返します。
//主にオペレータ演算子で使う事を想定した物ですが、直接呼んでも構いません。
//-------------------------------------------------------------------------------------------------------------------------------------------------------------
//【書式】
//RetData = isSame( <const DictionaryObject &$CalcNum> );
//<const DictionaryObject &$CalcNum>：確認したいDictionaryObjectクラスを指定します。
//-------------------------------------------------------------------------------------------------------------------------------------------------------------
//【返る値(bool)】
//true ＝引数とクラスの情報は同じです。
//false＝引数とクラスの情報は異なっています。
//*************************************************************************************************************************************************************
bool DictionaryObject::isSame( const DictionaryObject &$CalcNum ) const{
	
	bool RetData = false;//返すデータ

	if ( DicType == $CalcNum.DicType ) {
		//↓自身と引数の辞書オブジェクトタイプが同じタイプの場合
		if ( DicType == tOBJECT_TYPE::BITMAP	) { if ( *GetBitMapPtr	 ()	== *$CalcNum.GetBitMapPtr	()	) { RetData = true; }else{ return false; } }else
		if ( DicType == tOBJECT_TYPE::MOVIECLIP	) { if ( *GetMovieClipPtr()	== *$CalcNum.GetMovieClipPtr()	) { RetData = true; }else{ return false; } }else
		if ( DicType == tOBJECT_TYPE::SHAPE		) { if ( *GetShapePtr	 ()	== *$CalcNum.GetShapePtr	()	) { RetData = true; }else{ return false; } }else
		if ( DicType == tOBJECT_TYPE::UNDEFINED	) { RetData = true; }
	}else{ return false; }

	return RetData;
}
//*************************************************************************************************************************************************************


//*************************************************************************************************************************************************************
//★その他単品の関数群
//*************************************************************************************************************************************************************
bool DictionaryObject::isSame( const BitMap		&$CalcNum ) const{ return ((DicType == tOBJECT_TYPE::BITMAP		)? ((*GetBitMapPtr	 () == $CalcNum)? true : false) : false); }//本クラスのDictionaryObject情報が指定されたBitMap情報と同じであるか確認する関数
bool DictionaryObject::isSame( const MovieClip	&$CalcNum ) const{ return ((DicType == tOBJECT_TYPE::MOVIECLIP	)? ((*GetMovieClipPtr() == $CalcNum)? true : false) : false); }//本クラスのDictionaryObject情報が指定されたMovieClip情報と同じであるか確認する関数
bool DictionaryObject::isSame( const Shape		&$CalcNum ) const{ return ((DicType == tOBJECT_TYPE::SHAPE		)? ((*GetShapePtr	 () == $CalcNum)? true : false) : false); }//本クラスのDictionaryObject情報が指定されたShape情報と同じであるか確認する関数
//*************************************************************************************************************************************************************

}}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
