/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//           辞書オブジェクトクラス[各種オペレータ定義]
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "../../SwfPlayerLib.h"

namespace SwfPlayerLib{
namespace FLSystem{

//*************************************************************************************************************************************************************
//★代入演算子(=)を行なう関数
//-------------------------------------------------------------------------------------------------------------------------------------------------------------
//【説明】
//代入演算子(=)の処理を行ないます。
//※処理内容が2行以上になったらここにまとめないで独立させてください。
//-------------------------------------------------------------------------------------------------------------------------------------------------------------
//【書式】
//objvar = <代入する値/変数>;
//*************************************************************************************************************************************************************
DictionaryObject &DictionaryObject::operator=( const BitMap				&$CalcNum ){ SetDicObject( $CalcNum ); return *this; }
DictionaryObject &DictionaryObject::operator=( const MovieClip			&$CalcNum ){ SetDicObject( $CalcNum ); return *this; }
DictionaryObject &DictionaryObject::operator=( const Shape				&$CalcNum ){ SetDicObject( $CalcNum ); return *this; }
DictionaryObject &DictionaryObject::operator=( const DictionaryObject	&$CalcNum ){ SetDicObject( $CalcNum ); return *this; }
//*************************************************************************************************************************************************************


//*************************************************************************************************************************************************************
//★比較演算(==)を行なう関数
//-------------------------------------------------------------------------------------------------------------------------------------------------------------
//【説明】
//比較演算(==)の処理を行ないます。
//※処理内容が2行以上になったらここにまとめないで独立させてください。
//-------------------------------------------------------------------------------------------------------------------------------------------------------------
//【書式[例]】
//if ( objvar == <比較する値/変数> ) {}
//*************************************************************************************************************************************************************
bool DictionaryObject::operator==( const BitMap				&$CalcNum ) const{ return (isSame( $CalcNum )); }
bool DictionaryObject::operator==( const MovieClip			&$CalcNum ) const{ return (isSame( $CalcNum )); }
bool DictionaryObject::operator==( const Shape				&$CalcNum ) const{ return (isSame( $CalcNum )); }
bool DictionaryObject::operator==( const DictionaryObject	&$CalcNum ) const{ return (isSame( $CalcNum )); }
//*************************************************************************************************************************************************************


//*************************************************************************************************************************************************************
//★比較演算(!=)を行なう関数
//-------------------------------------------------------------------------------------------------------------------------------------------------------------
//【説明】
//比較演算(!=)の処理を行ないます。
//※処理内容が2行以上になったらここにまとめないで独立させてください。
//-------------------------------------------------------------------------------------------------------------------------------------------------------------
//【書式[例]】
//if ( objvar != <比較する値/変数> ) {}
//*************************************************************************************************************************************************************
bool DictionaryObject::operator!=( const BitMap				&$CalcNum ) const{ return (!isSame( $CalcNum )); }
bool DictionaryObject::operator!=( const MovieClip			&$CalcNum ) const{ return (!isSame( $CalcNum )); }
bool DictionaryObject::operator!=( const Shape				&$CalcNum ) const{ return (!isSame( $CalcNum )); }
bool DictionaryObject::operator!=( const DictionaryObject	&$CalcNum ) const{ return (!isSame( $CalcNum )); }
//*************************************************************************************************************************************************************

}}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
