/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//           画素の直接並び替え処理クラス[基本定義]
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef ASL_INCLUDE_20190118_3VRV6GE3HW7R//まだ読み込まれていなければ以下の処理をする
#define ASL_INCLUDE_20190118_3VRV6GE3HW7R//「画素の直接並び替え処理クラス」読み込みフラグ

#include "../Include.h"					//全ファイルでInclude可能なソースまとめファイル
#include "Struct.h"						//画素の直接並び替え処理クラスのStruct定義ファイル
#include "../../VType/Binary/Binary.h"	//バイナリデータ管理クラス

namespace AppStdLib{
namespace Utility{

using namespace std;		//「string」の名前空間「std」を指定
using namespace Const;		//Utility定数の名前空間「Const」を指定

//*************************************************************************************************************************************************************
//★画素の直接並び替え処理クラス
//-------------------------------------------------------------------------------------------------------------------------------------------------------------
//【説明】
//このクラスでは画素の並び替え処理を行ないます。
//コンストラクタ又は代入によって指定された各画素の構造体は現在の変換モードに従って並び替えが行なわれ、結果が共有バイナリデータに追加登録されます。
//基本的に特殊な使い方を想定したクラスであるため、コンストラクタや代入演算子の仕様は「本クラスに指定した値を登録する」ではなく、
//「指定した値を共有バイナリデータに追加登録する」と言う挙動になるため、注意が必要です。
//*************************************************************************************************************************************************************
class ASL_API PixelConverter final{
	
	public:
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		//■型定義[public]
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		typedef VType::Binary			Binary;	//バイナリデータ管理クラスの省略定義
		typedef tPIXEL_CONVERT_MODE::E	tMODE;	//変換モード定数の省略定義
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		//■関数定義[public]
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		//=================================================================================================================================
		//☆コンストラクタ群[PixelConverter.hpp]⇒◎実装済み
		//=================================================================================================================================
		PixelConverter(									);//コンストラクタ[初期値が未定義]
		PixelConverter( const UTRGB			 &$InitVar	);//コンストラクタ[初期値がUTRGB]
		PixelConverter( const UTRGBA		 &$InitVar	);//コンストラクタ[初期値がUTRGBA]
		PixelConverter( const UTARGB		 &$InitVar	);//コンストラクタ[初期値がUTARGB]
		PixelConverter( const UTBGR			 &$InitVar	);//コンストラクタ[初期値がUTBGR]
		PixelConverter( const UTBGRA		 &$InitVar	);//コンストラクタ[初期値がUTBGRA]
		PixelConverter( const UTXRGB		 &$InitVar	);//コンストラクタ[初期値がUTXRGB]
		PixelConverter( const UTXRGB15		 &$InitVar	);//コンストラクタ[初期値がUTXRGB]
		PixelConverter( const PixelConverter &$InitVar	);//コンストラクタ[初期値がPixelConverter]
		//=================================================================================================================================
		//=================================================================================================================================
		//☆オペレータ - 代入演算子(=)群[Operator.hpp]⇒◎実装済み
		//=================================================================================================================================
		PixelConverter &operator=( const UTRGB			&$CalcNum );//代入演算子(=)[UTRGB]
		PixelConverter &operator=( const UTRGBA			&$CalcNum );//代入演算子(=)[UTRGBA]
		PixelConverter &operator=( const UTARGB			&$CalcNum );//代入演算子(=)[UTARGB]
		PixelConverter &operator=( const UTBGR			&$CalcNum );//代入演算子(=)[UTBGR]
		PixelConverter &operator=( const UTBGRA			&$CalcNum );//代入演算子(=)[UTBGRA]
		PixelConverter &operator=( const UTXRGB			&$CalcNum );//代入演算子(=)[UTXRGB]
		PixelConverter &operator=( const UTXRGB15		&$CalcNum );//代入演算子(=)[UTXRGB15]
		PixelConverter &operator=( const PixelConverter	&$CalcNum );//代入演算子(=)[PixelConverter]
		//=================================================================================================================================
		//=================================================================================================================================
		//☆アクセサ関連[Accessor.hpp]⇒◎実装済み
		//=================================================================================================================================
		static void SetConvertMode( tMODE $Mode );//本クラスに変換モード設定を設定する関数
		//---------------------------------------------------------------------------------------------------------------------------------
		static tMODE GetConvertMode();//本クラスの変換モード設定の値を返す関数
		//----------------------------------------------------------------------
		static const Binary* GetSaveBinaryPtr	();//本クラスの変換した結果を保存するバイナリデータのポインタを返す関数
		static const Binary* GetDestAlphaDataPtr();//本クラスの破棄した透過度データのポインタを返す関数
		//=================================================================================================================================
		//=================================================================================================================================
		//☆基本機能関連[PixelConverterBasic.hpp]⇒◎実装済み
		//=================================================================================================================================
		static void ConvertPixel( const UTRGB	 &$InitVar	 );//RGBのピクセル色をConvertModeで指定した並びのピクセル色に変換してSaveBinaryに格納する関数
		static void ConvertPixel( const UTRGBA	 &$InitVar	 );//RGBAのピクセル色をConvertModeで指定した並びのピクセル色に変換してSaveBinaryに格納する関数
		static void ConvertPixel( const UTARGB	 &$InitVar	 );//ARGBのピクセル色をConvertModeで指定した並びのピクセル色に変換してSaveBinaryに格納する関数
		static void ConvertPixel( const UTBGR	 &$InitVar	 );//BGRのピクセル色をConvertModeで指定した並びのピクセル色に変換してSaveBinaryに格納する関数
		static void ConvertPixel( const UTBGRA	 &$InitVar	 );//BGRAのピクセル色をConvertModeで指定した並びのピクセル色に変換してSaveBinaryに格納する関数
		static void ConvertPixel( const UTXRGB	 &$InitVar	 );//XRGBのピクセル色をConvertModeで指定した並びのピクセル色に変換してSaveBinaryに格納する関数
		static void ConvertPixel( const UTXRGB15 &$InitVar	 );//XRGB15のピクセル色をConvertModeで指定した並びのピクセル色に変換してSaveBinaryに格納する関数
		static bool AddPading	(		UINT8	 $AddByteNum );//SaveBinaryに指定したバイト数分パディングを追加する関数
		//=================================================================================================================================
		//=================================================================================================================================
		//☆デバッグ機能関連[PixelConverterDebug.hpp]⇒◎実装済み
		//=================================================================================================================================
		void DebugExec();//各種機能のデバッグ実行関数
		//=================================================================================================================================
		//=================================================================================================================================
		//☆デストラクタ群[PixelConverter.hpp]⇒◎実装済み
		//=================================================================================================================================
		~PixelConverter();//デストラクタ
		//=================================================================================================================================
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	private:
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		//■変数定義[private]
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		static tMODE	ConvertMode;	//変換モード設定(全PixelConverter一括設定)
		static Binary	SaveBinary;		//変換した結果を保存するバイナリデータ
		static Binary	DestAlphaData;	//破棄した透過度データ※RGBA等の透過度付き⇒RGB等の透過度なしに変換したときに破棄した透過度データ。
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		//■関数定義[private]
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		//特になし。
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

};
//*************************************************************************************************************************************************************

}}
#endif//ASL_INCLUDE_20190118_3VRV6GE3HW7R
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
